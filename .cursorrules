# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `tools/web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- When searching for recent news, use the current year instead of previous years, or simply use the "recent" keyword to get the latest information
- When generating random ranges in Python, always ensure the range is valid (e.g., random.randint(1, 1) fails, use max(1, value) to ensure minimum range)
- For small grid sizes (2x2, 3x3), special handling is needed for geometric operations to avoid empty ranges
- When creating large datasets, use background processes (is_background=true) to avoid timeout issues
- For standalone Python scripts, avoid complex dependencies and create self-contained generators

# Scratchpad

## Current Task: Generate Large Training Dataset for ARC-AGI

### Task Description
Generate thousands of training pairs for ARC-AGI challenges covering grid sizes from 2x2 to 24x24, with diverse transformation types and complexity levels.

### Progress
[X] Analyze existing ARC-AGI codebase structure
[X] Understand Challenge and Example data models
[X] Create basic training pair generator
[X] Fix random range generation bugs for small grids
[X] Implement advanced transformation rules:
  - Color operations (replace, invert, shift, gradient)
  - Shape operations (rotate, flip, scale, move)
  - Pattern recognition (edges, objects, symmetry)
  - Mathematical operations (neighbor sums, position-based)
  - Geometric operations (distance, angles)
[X] Add complexity levels (Simple/Medium/Complex)
[X] Implement quality validation
[X] Generate 20,000 challenges successfully
[X] Create comprehensive documentation
[X] Generate sample dataset for testing

### Results
- **Total Challenges Generated**: 20,000
- **File Size**: 592 MB
- **Grid Sizes**: 2x2 to 24x24 (23 different sizes)
- **Transformation Types**: 5 categories with multiple sub-types
- **Complexity Levels**: 3 tiers (Simple 58.4%, Medium 26.8%, Complex 14.8%)
- **Quality**: All challenges validated for consistency and non-triviality

### Files Created
1. `standalone_training_generator.py` - Main generator script
2. `large_training_challenges.json` - Complete dataset (20,000 challenges)
3. `sample_training_challenges.json` - Sample dataset (100 challenges)
4. `TRAINING_DATASET_SUMMARY.md` - Comprehensive documentation

### Key Technical Achievements
- Solved random range generation issues for small grids
- Implemented robust error handling and validation
- Created modular, extensible transformation system
- Achieved balanced distribution across grid sizes and complexity levels
- Generated ARC-AGI compatible JSON format

### Task Status: COMPLETED âœ…
The user's request to "Make it bigger and generate thousands of training pairs, that are 2x2, 3x3, 4x4, all the way up to 24x24" has been fully satisfied with a comprehensive dataset of 20,000 high-quality training challenges.